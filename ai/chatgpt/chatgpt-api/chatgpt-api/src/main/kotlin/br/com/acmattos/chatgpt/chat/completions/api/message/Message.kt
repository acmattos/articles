package br.com.acmattos.chatgpt.chat.completions.api.message

import br.com.acmattos.chatgpt.chat.completions.api.message.Role.ASSISTANT
import br.com.acmattos.chatgpt.chat.completions.api.message.Role.SYSTEM
import br.com.acmattos.chatgpt.chat.completions.api.message.Role.USER
import com.google.gson.annotations.SerializedName

/**
 * The type of a Chat GPT Message.
 */
enum class Role(val value: String){
    ASSISTANT("assistant"),
    USER("user"),
    SYSTEM("system"),
}

/**
 * A message to be sent to Chat GPT.
 *
 * @param T the type of <code>content</code> attribute.
 * @property role the role of the messages author, in this case
 *                assistant/system/user.
 * @property content the contents of the message.
 * @property name an optional name for the participant. Provides the model
 *                information to differentiate between participants of the same
 *                role.
 * @constructor Creates a message.
 */
open class Message<T>(
    open val role: String,
    open val content: T?,
    open val name: String? = null,
) {
    constructor(
        role: Role,
        content: T?,
        name: String? = null,
    ): this(role.value, content, name)

    override fun toString(): String {
        return """Message(role=$role, content=$content"""
    }
}

/**
 * A system message to be sent to Chat GPT.
 *
 * @property content the contents of the system message.
 * @property name An optional name for the participant. Provides the model
 *                 information to differentiate between participants of the
 *                 same role.
 * @constructor Creates a system message.
 */
class SystemMessage(
    override val content: String,
    override val name: String?
): Message<String>(SYSTEM, content, name)

/**
 * A user message to be sent to Chat GPT.
 *
 * @property content the contents of the system message.
 * @property name an optional name for the participant. Provides the model
 *                information to differentiate between participants of the same
 *                role.
 * @constructor Creates a user message.
 */
class UserMessage(
    override val content: String,
    override val name: String? = null,
): Message<String>(USER, content, name)

/**
 * A list of user messages to be sent to Chat GPT.
 *
 * @property content the contents of the system message.
 * @property name an optional name for the participant. Provides the model
 *                information to differentiate between participants of the same
 *                role.
 * @constructor Creates a user  message list.
 */
class UserMessageList(
    override val content: List<String>,
    override val name: String?
): Message<List<String>>(USER, content, name)

/**
 * A assistant message to be sent to or received from Chat GPT.
 *
 * @property content the contents of the assistant message. Required unless
 *                   <code>toolCalls</code> is specified.
 * @property name an optional name for the participant. Provides the model
 *                information to differentiate between participants of the same
 *                role.
 * @constructor Creates a assistant message.
 */
class AssistantMessage(
    override val content: String?,
    override val name: String?,
    @SerializedName("tool_calls")
    val toolCalls: List<ToolCall>?,
): Message<String>(ASSISTANT, content, name)

/**
 * The tool call generated by the model, such as function call.
 *
 * @property id the ID of the tool call.
 * @property type the type of the tool. Currently, only function is supported.
 * @property function the function that the model called.
 */
class ToolCall(
    val id: String,
    val type: String,
    val function: Function,
)

/**
 * The function that the model called.
 *
 * @property name the name of the function to call.
 * @property arguments the arguments to call the function with, as generated by
 *                     the model in JSON format. Note that the model does not
 *                     always generate valid JSON, and may hallucinate
 *                     parameters not defined by your function schema. Validate
 *                     the arguments in your code before calling your function.
 */
class Function(
   val name: String,
   val arguments: String,
)
